<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractOpenGLFunctions</name>
        <filename>qabstractopenglfunctions.html</filename>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAbstractOpenGLFunctions</name>
            <anchorfile>qabstractopenglfunctions.html</anchorfile>
            <anchor>QAbstractOpenGLFunctions-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractOpenGLFunctions</name>
            <anchorfile>qabstractopenglfunctions.html</anchorfile>
            <anchor>dtor.QAbstractOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLBuffer</name>
        <filename>qopenglbuffer.html</filename>
        <member kind="enumeration">
            <name>Access</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOnly</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RangeAccessFlag</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RangeRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeWrite</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeInvalidate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeInvalidateBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeFlushExplicit</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RangeUnsynchronized</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VertexBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelPackBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PixelUnpackBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UsagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StreamDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StreamCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StaticCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicDraw</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicRead</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicCopy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QOpenGLBuffer &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-3</anchor>
            <arglist>(QOpenGLBuffer &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-1</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-2</anchor>
            <arglist>(const QOpenGLBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(int offset, void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>map</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QOpenGLBuffer::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>mapRange</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>mapRange</anchor>
            <arglist>(int offset, int count, QOpenGLBuffer::RangeAccessFlags access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate-1</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release-1</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>setUsagePattern</anchor>
            <arglist>(QOpenGLBuffer::UsagePattern value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QOpenGLBuffer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>write</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(int offset, const void *data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>dtor.QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bufferId</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bufferId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::Type</type>
            <name>type</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::UsagePattern</type>
            <name>usagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>usagePattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QOpenGLBuffer::RangeAccessFlag">
            <name>RangeAccessFlags</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>RangeAccessFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLDebugLogger</name>
        <filename>qopengldebuglogger.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>LoggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AsynchronousLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SynchronousLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>LoggingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugLogger</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>QOpenGLDebugLogger</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>initialize</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>initialize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>disableMessages</anchor>
            <arglist>(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>disableMessages-1</anchor>
            <arglist>(const QList&lt;GLuint&gt; &amp;ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>enableMessages</anchor>
            <arglist>(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>enableMessages-1</anchor>
            <arglist>(const QList&lt;GLuint&gt; &amp;ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logMessage</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>logMessage</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageLogged</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>messageLogged</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>popGroup</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>popGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pushGroup</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>pushGroup</anchor>
            <arglist>(const QString &amp;name, GLuint id, QOpenGLDebugMessage::Source source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>startLogging</anchor>
            <arglist>(QOpenGLDebugLogger::LoggingMode loggingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stopLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>stopLogging</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLDebugLogger</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>dtor.QOpenGLDebugLogger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLDebugMessage&gt;</type>
            <name>loggedMessages</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggedMessages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugLogger::LoggingMode</type>
            <name>loggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggingMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLogging</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>isLogging</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>maximumMessageLength</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>maximumMessageLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="LoggingMode">
            <name>loggingMode</name>
            <anchorfile>qopengldebuglogger.html</anchorfile>
            <anchor>loggingMode-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLDebugMessage</name>
        <filename>qopengldebugmessage.html</filename>
        <member kind="enumeration">
            <name>Severity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MediumSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotificationSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastSeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnySeverity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Source</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>APISource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowSystemSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShaderCompilerSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThirdPartySource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastSource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnySource</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InvalidType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ErrorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeprecatedBehaviorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UndefinedBehaviorType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PortabilityType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerformanceType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarkerType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupPushType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupPopType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyType</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Severity severity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Source source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug debug, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(QDebug debug, const QOpenGLDebugMessage &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage &amp;</type>
            <name>operator=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QOpenGLDebugMessage &amp;&amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage &amp;</type>
            <name>operator=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLDebugMessage</type>
            <name>createApplicationMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>createApplicationMessage</anchor>
            <arglist>(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLDebugMessage</type>
            <name>createThirdPartyMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>createThirdPartyMessage</anchor>
            <arglist>(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>QOpenGLDebugMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>QOpenGLDebugMessage-1</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QOpenGLDebugMessage &amp;debugMessage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLDebugMessage</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>dtor.QOpenGLDebugMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>id</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Severity</type>
            <name>severity</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>severity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Source</type>
            <name>source</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLDebugMessage::Type</type>
            <name>type</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>message</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>message</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QOpenGLDebugMessage &amp;debugMessage) const const</arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Severity">
            <name>Severities</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Severity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Source">
            <name>Sources</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLDebugMessage::Type">
            <name>Types</name>
            <anchorfile>qopengldebugmessage.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObject</name>
        <filename>qopenglframebufferobject.html</filename>
        <member kind="enumeration">
            <name>Attachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CombinedDepthStencil</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FramebufferRestorePolicy</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DontRestoreFramebufferBinding</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestoreFramebufferBindingToDefault</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RestoreFrameBufferBinding</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>FramebufferRestorePolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>takeTexture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>takeTexture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>takeTexture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>takeTexture-1</anchor>
            <arglist>(int colorAttachmentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject</anchor>
            <arglist>(const QSize &amp;size, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-2</anchor>
            <arglist>(const QSize &amp;size, QOpenGLFramebufferObject::Attachment attachment, GLenum target, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-4</anchor>
            <arglist>(const QSize &amp;size, const QOpenGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-1</anchor>
            <arglist>(int width, int height, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-3</anchor>
            <arglist>(int width, int height, QOpenGLFramebufferObject::Attachment attachment, GLenum target, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-5</anchor>
            <arglist>(int width, int height, const QOpenGLFramebufferObjectFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>bindDefault</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>bindDefault</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferBlit</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferBlit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferObjects</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColorAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>addColorAttachment</anchor>
            <arglist>(const QSize &amp;size, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColorAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>addColorAttachment-1</anchor>
            <arglist>(int width, int height, GLenum internalFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-3</anchor>
            <arglist>(QOpenGLFramebufferObject *target, QOpenGLFramebufferObject *source, GLbitfield buffers, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-2</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-1</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter, int readColorAttachmentIndex, int drawColorAttachmentIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer</anchor>
            <arglist>(QOpenGLFramebufferObject *target, const QRect &amp;targetRect, QOpenGLFramebufferObject *source, const QRect &amp;sourceRect, GLbitfield buffers, GLenum filter, int readColorAttachmentIndex, int drawColorAttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QOpenGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>handle</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>texture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>(bool flipped) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage-1</anchor>
            <arglist>(bool flipped, int colorAttachmentIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;GLuint&gt;</type>
            <name>textures</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>textures</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSize&gt;</type>
            <name>sizes</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>sizes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat</type>
            <name>format</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObjectFormat</name>
        <filename>qopenglframebufferobjectformat.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat-1</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QOpenGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInternalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setInternalTextureFormat</anchor>
            <arglist>(GLenum internalTextureFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setTextureTarget</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>internalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>internalTextureFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>textureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>textureTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_0</name>
        <filename>qopenglfunctions-1-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_1</name>
        <filename>qopenglfunctions-1-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_2</name>
        <filename>qopenglfunctions-1-2.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_3</name>
        <filename>qopenglfunctions-1-3.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_4</name>
        <filename>qopenglfunctions-1-4.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_1_5</name>
        <filename>qopenglfunctions-1-5.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_0</name>
        <filename>qopenglfunctions-2-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_2_1</name>
        <filename>qopenglfunctions-2-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_0</name>
        <filename>qopenglfunctions-3-0.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_1</name>
        <filename>qopenglfunctions-3-1.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_2_Compatibility</name>
        <filename>qopenglfunctions-3-2-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_2_Core</name>
        <filename>qopenglfunctions-3-2-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_Compatibility</name>
        <filename>qopenglfunctions-3-3-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_3_3_Core</name>
        <filename>qopenglfunctions-3-3-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_0_Compatibility</name>
        <filename>qopenglfunctions-4-0-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_0_Core</name>
        <filename>qopenglfunctions-4-0-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_1_Compatibility</name>
        <filename>qopenglfunctions-4-1-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_1_Core</name>
        <filename>qopenglfunctions-4-1-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_2_Compatibility</name>
        <filename>qopenglfunctions-4-2-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_2_Core</name>
        <filename>qopenglfunctions-4-2-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_3_Compatibility</name>
        <filename>qopenglfunctions-4-3-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_3_Core</name>
        <filename>qopenglfunctions-4-3-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_4_Compatibility</name>
        <filename>qopenglfunctions-4-4-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_4_Core</name>
        <filename>qopenglfunctions-4-4-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_Compatibility</name>
        <filename>qopenglfunctions-4-5-compatibility.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_4_5_Core</name>
        <filename>qopenglfunctions-4-5-core.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions_ES2</name>
        <filename>qopenglfunctions-es2.html</filename>
        <base>QAbstractOpenGLFunctions</base>
    </compound>
    <compound kind="class">
        <name>QOpenGLPaintDevice</name>
        <filename>qopenglpaintdevice.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ensureActiveTarget</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>ensureActiveTarget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal devicePixelRatio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterX</anchor>
            <arglist>(qreal dpmx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterY</anchor>
            <arglist>(qreal dpmy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setPaintFlipped</anchor>
            <arglist>(bool flipped)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dtor.QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>paintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintFlipped</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterX</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterY</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLPixelTransferOptions</name>
        <filename>qopenglpixeltransferoptions.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPixelTransferOptions</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>QOpenGLPixelTransferOptions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(int alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageHeight</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setImageHeight</anchor>
            <arglist>(int imageHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeastSignificantByteFirst</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setLeastSignificantByteFirst</anchor>
            <arglist>(bool lsbFirst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowLength</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setRowLength</anchor>
            <arglist>(int rowLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipImages</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipImages</anchor>
            <arglist>(int skipImages)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipPixels</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipPixels</anchor>
            <arglist>(int skipPixels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSkipRows</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSkipRows</anchor>
            <arglist>(int skipRows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapBytesEnabled</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>setSwapBytesEnabled</anchor>
            <arglist>(bool swapBytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLPixelTransferOptions</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>dtor.QOpenGLPixelTransferOptions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLeastSignificantBitFirst</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>isLeastSignificantBitFirst</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSwapBytesEnabled</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>isSwapBytesEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alignment</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>imageHeight</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>imageHeight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowLength</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>rowLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipImages</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipImages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipPixels</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipPixels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>skipRows</name>
            <anchorfile>qopenglpixeltransferoptions.html</anchorfile>
            <anchor>skipRows</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShader</name>
        <filename>qopenglshader.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ShaderTypeBit</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Vertex</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fragment</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Geometry</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationControl</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TessellationEvaluation</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Compute</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>QOpenGLShader</anchor>
            <arglist>(QOpenGLShader::ShaderType type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-1</anchor>
            <arglist>(const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-2</anchor>
            <arglist>(const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode</anchor>
            <arglist>(const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceFile</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaders</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>hasOpenGLShaders</anchor>
            <arglist>(QOpenGLShader::ShaderType type, QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>dtor.QOpenGLShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>shaderId</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>sourceCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLShader::ShaderType</type>
            <name>shaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompiled</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>isCompiled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QOpenGLShader::ShaderTypeBit">
            <name>ShaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShaderProgram</name>
        <filename>qopenglshaderprogram.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>QOpenGLShaderProgram</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode-1</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode-2</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceCode</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addCacheableShaderFromSourceFile</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addCacheableShaderFromSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShader</anchor>
            <arglist>(QOpenGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-1</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QByteArray &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-2</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const char *source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceFile</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceFile</anchor>
            <arglist>(QOpenGLShader::ShaderType type, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaderPrograms</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>hasOpenGLShaderPrograms</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>link</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>link</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-2</anchor>
            <arglist>(const QString &amp;name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation</anchor>
            <arglist>(const char *name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray-1</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllShaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeAllShaders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeShader</anchor>
            <arglist>(QOpenGLShader *shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-9</anchor>
            <arglist>(const char *name, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-5</anchor>
            <arglist>(const char *name, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-6</anchor>
            <arglist>(const char *name, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-7</anchor>
            <arglist>(const char *name, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-8</anchor>
            <arglist>(const char *name, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-4</anchor>
            <arglist>(int location, GLenum type, const void *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray</anchor>
            <arglist>(int location, const GLfloat *values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-1</anchor>
            <arglist>(int location, const QVector2D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-2</anchor>
            <arglist>(int location, const QVector3D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-3</anchor>
            <arglist>(int location, const QVector4D *values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer-1</anchor>
            <arglist>(const char *name, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer</anchor>
            <arglist>(int location, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-9</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-10</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-11</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-12</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-17</anchor>
            <arglist>(const char *name, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-16</anchor>
            <arglist>(const char *name, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-13</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-14</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-15</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-1</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-2</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-8</anchor>
            <arglist>(int location, const GLfloat *values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-7</anchor>
            <arglist>(int location, const QColor &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-4</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-5</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-6</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultInnerTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setDefaultInnerTessellationLevels</anchor>
            <arglist>(const QList&lt;float&gt; &amp;levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultOuterTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setDefaultOuterTessellationLevels</anchor>
            <arglist>(const QList&lt;float&gt; &amp;levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPatchVertexCount</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setPatchVertexCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-27</anchor>
            <arglist>(const char *name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-30</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-31</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-32</anchor>
            <arglist>(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-28</anchor>
            <arglist>(const char *name, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-29</anchor>
            <arglist>(const char *name, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-50</anchor>
            <arglist>(const char *name, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-51</anchor>
            <arglist>(const char *name, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-52</anchor>
            <arglist>(const char *name, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-36</anchor>
            <arglist>(const char *name, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-41</anchor>
            <arglist>(const char *name, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-42</anchor>
            <arglist>(const char *name, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-43</anchor>
            <arglist>(const char *name, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-44</anchor>
            <arglist>(const char *name, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-45</anchor>
            <arglist>(const char *name, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-46</anchor>
            <arglist>(const char *name, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-47</anchor>
            <arglist>(const char *name, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-48</anchor>
            <arglist>(const char *name, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-49</anchor>
            <arglist>(const char *name, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-37</anchor>
            <arglist>(const char *name, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-38</anchor>
            <arglist>(const char *name, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-39</anchor>
            <arglist>(const char *name, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-40</anchor>
            <arglist>(const char *name, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-53</anchor>
            <arglist>(const char *name, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-33</anchor>
            <arglist>(const char *name, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-34</anchor>
            <arglist>(const char *name, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-35</anchor>
            <arglist>(const char *name, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-4</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-5</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-1</anchor>
            <arglist>(int location, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-2</anchor>
            <arglist>(int location, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-23</anchor>
            <arglist>(int location, const GLfloat [2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-24</anchor>
            <arglist>(int location, const GLfloat [3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-25</anchor>
            <arglist>(int location, const GLfloat [4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-9</anchor>
            <arglist>(int location, const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-14</anchor>
            <arglist>(int location, const QMatrix2x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-15</anchor>
            <arglist>(int location, const QMatrix2x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-16</anchor>
            <arglist>(int location, const QMatrix2x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-17</anchor>
            <arglist>(int location, const QMatrix3x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-18</anchor>
            <arglist>(int location, const QMatrix3x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-19</anchor>
            <arglist>(int location, const QMatrix3x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-20</anchor>
            <arglist>(int location, const QMatrix4x2 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-21</anchor>
            <arglist>(int location, const QMatrix4x3 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-22</anchor>
            <arglist>(int location, const QMatrix4x4 &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-10</anchor>
            <arglist>(int location, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-11</anchor>
            <arglist>(int location, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-12</anchor>
            <arglist>(int location, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-13</anchor>
            <arglist>(int location, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-26</anchor>
            <arglist>(int location, const QTransform &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-6</anchor>
            <arglist>(int location, const QVector2D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-7</anchor>
            <arglist>(int location, const QVector3D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-8</anchor>
            <arglist>(int location, const QVector4D &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-15</anchor>
            <arglist>(const char *name, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-16</anchor>
            <arglist>(const char *name, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-17</anchor>
            <arglist>(const char *name, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-21</anchor>
            <arglist>(const char *name, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-22</anchor>
            <arglist>(const char *name, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-23</anchor>
            <arglist>(const char *name, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-24</anchor>
            <arglist>(const char *name, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-25</anchor>
            <arglist>(const char *name, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-26</anchor>
            <arglist>(const char *name, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-27</anchor>
            <arglist>(const char *name, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-28</anchor>
            <arglist>(const char *name, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-29</anchor>
            <arglist>(const char *name, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-18</anchor>
            <arglist>(const char *name, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-19</anchor>
            <arglist>(const char *name, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-20</anchor>
            <arglist>(const char *name, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray</anchor>
            <arglist>(int location, const GLfloat *values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-1</anchor>
            <arglist>(int location, const GLint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-2</anchor>
            <arglist>(int location, const GLuint *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-6</anchor>
            <arglist>(int location, const QMatrix2x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-7</anchor>
            <arglist>(int location, const QMatrix2x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-8</anchor>
            <arglist>(int location, const QMatrix2x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-9</anchor>
            <arglist>(int location, const QMatrix3x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-10</anchor>
            <arglist>(int location, const QMatrix3x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-11</anchor>
            <arglist>(int location, const QMatrix3x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-12</anchor>
            <arglist>(int location, const QMatrix4x2 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-13</anchor>
            <arglist>(int location, const QMatrix4x3 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-14</anchor>
            <arglist>(int location, const QMatrix4x4 *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-3</anchor>
            <arglist>(int location, const QVector2D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-4</anchor>
            <arglist>(int location, const QVector3D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-5</anchor>
            <arglist>(int location, const QVector4D *values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>dtor.QOpenGLShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>programId</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>programId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLShader *&gt;</type>
            <name>shaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>shaders</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;float&gt;</type>
            <name>defaultInnerTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>defaultInnerTessellationLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;float&gt;</type>
            <name>defaultOuterTessellationLevels</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>defaultOuterTessellationLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinked</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>isLinked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxGeometryOutputVertices</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>maxGeometryOutputVertices</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>patchVertexCount</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>patchVertexCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-1</anchor>
            <arglist>(const QByteArray &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-2</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTexture</name>
        <filename>qopengltexture.html</filename>
        <member kind="enumeration">
            <name>BindingTarget</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget1DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetCubeMap</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetCubeMapArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTarget2DMultisampleArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingTargetBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>BindingTarget-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ComparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CompareLessEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareGreaterEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareLess</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareGreater</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareNotEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareAlways</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareNever</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CommpareNotEqual</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonFunction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ComparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CompareRefToTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CompareNone</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>ComparisonMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateDirection</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirectionS</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectionT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectionR</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CoordinateDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CubeMapFace</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveX</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeX</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveY</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeY</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapPositiveZ</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CubeMapNegativeZ</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>CubeMapFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DepthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DepthMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>DepthStencilMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Feature</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ImmutableStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImmutableMultisampleStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureArrays</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Texture3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureCubeMapArrays</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swizzle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StencilTexturing</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnisotropicFiltering</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextures</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NPOTTextureRepeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Texture1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureComparisonOperators</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextureMipMapLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Filter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Nearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapNearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NearestMipMapLinear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapNearest</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearMipMapLinear</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MipMapGeneration</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>GenerateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontGenerateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>MipMapGeneration-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PixelFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoSourceFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Red</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGR</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGRA</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Red_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGR_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BGRA_Integer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Stencil</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Depth</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthStencil</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Alpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luminance</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceAlpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PixelType</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPixelType</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16OES</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB9_E5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RG11B10F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8_RG3B2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt8_RG3B2_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGB5A1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGB5A1_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_R5G6B5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_R5G6B5_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGBA4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt16_RGBA4_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGBA8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGBA8_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB10A2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_RGB10A2_Rev</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt32_D24S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float32_D32_UInt32_S8_X24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>PixelType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SwizzleComponent</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SwizzleRed</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleGreen</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleBlue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwizzleAlpha</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SwizzleValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>RedValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreenValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlueValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZeroValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneValue</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>SwizzleValue-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Target</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Target1D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target1DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target3D</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMap</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetCubeMapArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisample</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Target2DMultisampleArray</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetRectangle</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetBuffer</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Target-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextureFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32U</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32I</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA16F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB9E5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11B10F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG3B2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R5G6B5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB5A1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB10A2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D16</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D24S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32F</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>D32FS8X24</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>S8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT3</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_DXT5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R_ATI1N_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG_ATI2N_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNSIGNED_FLOAT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_SIGNED_FLOAT</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB_BP_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>R11_EAC_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RG11_EAC_SNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_PunchThrough_Alpha1_ETC2</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA8_ETC2_EAC</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ETC2_EAC</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGB8_ETC1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_4x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_5x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_5x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_6x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_6x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_8x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_10x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_12x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBA_ASTC_12x12</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_4x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_5x4</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_5x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_6x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_6x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_8x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x6</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_10x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_12x10</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8_ASTC_12x12</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB8_Alpha8</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT1</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT3</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_Alpha_DXT5</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SRGB_BP_UNorm</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DepthFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RGBAFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuminanceAlphaFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextureUnitReset</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ResetTextureUnit</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontResetTextureUnit</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>TextureUnitReset-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Repeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MirroredRepeat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToEdge</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClampToBorder</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>GLuint</type>
            <name>boundTextureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>boundTextureId</anchor>
            <arglist>(QOpenGLTexture::BindingTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>GLuint</type>
            <name>boundTextureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>boundTextureId-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::BindingTarget target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>QOpenGLTexture</anchor>
            <arglist>(QOpenGLTexture::Target target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTexture</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>QOpenGLTexture-1</anchor>
            <arglist>(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QOpenGLTexture::Feature feature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isBound-1</anchor>
            <arglist>(uint unit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocateStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>allocateStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocateStorage</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>allocateStorage-1</anchor>
            <arglist>(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>bind-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::TextureUnitReset reset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>generateMipMaps</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMipMaps</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>generateMipMaps-1</anchor>
            <arglist>(int baseLevel, bool resetBaseLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>release-1</anchor>
            <arglist>(uint unit, QOpenGLTexture::TextureUnitReset reset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoMipMapGenerationEnabled</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setAutoMipMapGenerationEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor</anchor>
            <arglist>(const QColor &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-1</anchor>
            <arglist>(float r, float g, float b, float a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-2</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setBorderColor-3</anchor>
            <arglist>(uint r, uint g, uint b, uint a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setComparisonFunction</anchor>
            <arglist>(QOpenGLTexture::ComparisonFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setComparisonMode</anchor>
            <arglist>(QOpenGLTexture::ComparisonMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-4</anchor>
            <arglist>(int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-3</anchor>
            <arglist>(int mipLevel, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-2</anchor>
            <arglist>(int mipLevel, int layer, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompressedData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setCompressedData-1</anchor>
            <arglist>(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-4</anchor>
            <arglist>(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-10</anchor>
            <arglist>(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-3</anchor>
            <arglist>(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-2</anchor>
            <arglist>(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-1</anchor>
            <arglist>(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-5</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-6</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-8</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-9</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, int layerCount, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setData-7</anchor>
            <arglist>(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setDepthStencilMode</anchor>
            <arglist>(QOpenGLTexture::DepthStencilMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedSamplePositions</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setFixedSamplePositions</anchor>
            <arglist>(bool fixed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QOpenGLTexture::TextureFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayers</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLayers</anchor>
            <arglist>(int layers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevelOfDetailRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLevelOfDetailRange</anchor>
            <arglist>(float min, float max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevelofDetailBias</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setLevelofDetailBias</anchor>
            <arglist>(float bias)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagnificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMagnificationFilter</anchor>
            <arglist>(QOpenGLTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumAnisotropy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMaximumAnisotropy</anchor>
            <arglist>(float anisotropy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMaximumLevelOfDetail</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinMagFilters</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinMagFilters</anchor>
            <arglist>(QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinificationFilter</anchor>
            <arglist>(QOpenGLTexture::Filter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMinimumLevelOfDetail</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipBaseLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipBaseLevel</anchor>
            <arglist>(int baseLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevelRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipLevelRange</anchor>
            <arglist>(int baseLevel, int maxLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipLevels</anchor>
            <arglist>(int levels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipMaxLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setMipMaxLevel</anchor>
            <arglist>(int maxLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int width, int height, int depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSwizzleMask</anchor>
            <arglist>(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setSwizzleMask-1</anchor>
            <arglist>(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setWrapMode-1</anchor>
            <arglist>(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(QOpenGLTexture::WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>textureId</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>textureId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture *</type>
            <name>createTextureView</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>createTextureView</anchor>
            <arglist>(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::ComparisonFunction</type>
            <name>comparisonFunction</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>comparisonFunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::ComparisonMode</type>
            <name>comparisonMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>comparisonMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::DepthStencilMode</type>
            <name>depthStencilMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>depthStencilMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Filter</type>
            <name>magnificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>magnificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Filter</type>
            <name>minificationFilter</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minificationFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::SwizzleValue</type>
            <name>swizzleMask</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>swizzleMask</anchor>
            <arglist>(QOpenGLTexture::SwizzleComponent component) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::Target</type>
            <name>target</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::TextureFormat</type>
            <name>format</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLTexture::WrapMode</type>
            <name>wrapMode</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>wrapMode</anchor>
            <arglist>(QOpenGLTexture::CoordinateDirection direction) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt;</type>
            <name>minMagFilters</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minMagFilters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;float, float&gt;</type>
            <name>levelOfDetailRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>levelOfDetailRange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>mipLevelRange</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipLevelRange</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoMipMapGenerationEnabled</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isAutoMipMapGenerationEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFixedSamplePositions</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isFixedSamplePositions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStorageAllocated</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isStorageAllocated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextureView</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>isTextureView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>levelofDetailBias</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>levelofDetailBias</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumAnisotropy</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumAnisotropy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maximumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumLevelOfDetail</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minimumLevelOfDetail</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>minimumLevelOfDetail</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>faces</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>faces</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layers</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>layers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumMipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>maximumMipLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipBaseLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipBaseLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevels</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipLevels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipMaxLevel</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>mipMaxLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-1</anchor>
            <arglist>(float *border) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-2</anchor>
            <arglist>(int *border) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>borderColor</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>borderColor-3</anchor>
            <arglist>(unsigned int *border) const const</arglist>
        </member>
        <member kind="typedef" type="QOpenGLTexture::Feature">
            <name>Features</name>
            <anchorfile>qopengltexture.html</anchorfile>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTextureBlitter</name>
        <filename>qopengltextureblitter.html</filename>
        <member kind="enumeration">
            <name>Origin</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OriginBottomLeft</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OriginTopLeft</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>Origin-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix3x3</type>
            <name>sourceTransform</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>sourceTransform</anchor>
            <arglist>(const QRectF &amp;subTexture, const QSize &amp;textureSize, QOpenGLTextureBlitter::Origin origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix4x4</type>
            <name>targetTransform</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>targetTransform</anchor>
            <arglist>(const QRectF &amp;target, const QRect &amp;viewport)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTextureBlitter</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>QOpenGLTextureBlitter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blit</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>blit</anchor>
            <arglist>(GLuint texture, const QMatrix4x4 &amp;targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blit</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>blit-1</anchor>
            <arglist>(GLuint texture, const QMatrix4x4 &amp;targetTransform, const QMatrix3x3 &amp;sourceTransform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(float opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedBlueSwizzle</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>setRedBlueSwizzle</anchor>
            <arglist>(bool swizzle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLTextureBlitter</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>dtor.QOpenGLTextureBlitter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsExternalOESTarget</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>supportsExternalOESTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsRectangleTarget</name>
            <anchorfile>qopengltextureblitter.html</anchorfile>
            <anchor>supportsRectangleTarget</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTimeMonitor</name>
        <filename>qopengltimemonitor.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTimeMonitor</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>QOpenGLTimeMonitor</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>recordSample</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>recordSample</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int sampleCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLTimeMonitor</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>dtor.QOpenGLTimeMonitor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;GLuint64&gt;</type>
            <name>waitForIntervals</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>waitForIntervals</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;GLuint64&gt;</type>
            <name>waitForSamples</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>waitForSamples</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;GLuint&gt;</type>
            <name>objectIds</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>objectIds</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultAvailable</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>isResultAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qopengltimemonitor.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLTimerQuery</name>
        <filename>qopengltimerquery.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLTimerQuery</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>QOpenGLTimerQuery</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>begin</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>end</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recordTimestamp</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>recordTimestamp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLTimerQuery</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>dtor.QOpenGLTimerQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>objectId</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>objectId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint64</type>
            <name>waitForResult</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>waitForResult</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint64</type>
            <name>waitForTimestamp</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>waitForTimestamp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultAvailable</name>
            <anchorfile>qopengltimerquery.html</anchorfile>
            <anchor>isResultAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionFunctionsFactory</name>
        <filename>qopenglversionfunctionsfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractOpenGLFunctions *</type>
            <name>get</name>
            <anchorfile>qopenglversionfunctionsfactory.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;versionProfile, QOpenGLContext *context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>TYPE *</type>
            <name>get</name>
            <anchorfile>qopenglversionfunctionsfactory.html</anchorfile>
            <anchor>get-1</anchor>
            <arglist>(QOpenGLContext *context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVersionProfile</name>
        <filename>qopenglversionprofile.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLVersionProfile &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile-2</anchor>
            <arglist>(const QOpenGLVersionProfile &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>QOpenGLVersionProfile-1</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>setProfile</anchor>
            <arglist>(QSurfaceFormat::OpenGLContextProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int majorVersion, int minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLVersionProfile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>dtor.QOpenGLVersionProfile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>version</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat::OpenGLContextProfile</type>
            <name>profile</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>profile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasProfiles</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>hasProfiles</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLegacyVersion</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>isLegacyVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglversionprofile.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVertexArrayObject</name>
        <filename>qopenglvertexarrayobject.html</filename>
        <base>QObject</base>
        <class>QOpenGLVertexArrayObject::Binder</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLVertexArrayObject</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>QOpenGLVertexArrayObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bind</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLVertexArrayObject</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>dtor.QOpenGLVertexArrayObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>objectId</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>objectId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopenglvertexarrayobject.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLVertexArrayObject::Binder</name>
        <filename>qopenglvertexarrayobject-binder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Binder</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>Binder</anchor>
            <arglist>(QOpenGLVertexArrayObject *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rebind</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>rebind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Binder</name>
            <anchorfile>qopenglvertexarrayobject-binder.html</anchorfile>
            <anchor>dtor.Binder</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLWidget</name>
        <filename>qopenglwidget.html</filename>
        <base>QWidget</base>
        <member kind="enumeration">
            <name>TargetBuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>TargetBuffer-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftBuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>TargetBuffer-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightBuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>TargetBuffer-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UpdateBehavior</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPartialUpdate</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialUpdate</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>grabFramebuffer-1</anchor>
            <arglist>(QOpenGLWidget::TargetBuffer targetBuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWidget</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>QOpenGLWidget</anchor>
            <arglist>(QWidget *parent, Qt::WindowFlags f)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToCompose</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>aboutToCompose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToResize</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>aboutToResize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>initializeGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>makeCurrent-1</anchor>
            <arglist>(QOpenGLWidget::TargetBuffer targetBuffer)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>paintGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *e) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeGL</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resizeGL</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resized</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>resized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureFormat</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>setTextureFormat</anchor>
            <arglist>(GLenum texFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdateBehavior</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>setUpdateBehavior</anchor>
            <arglist>(QOpenGLWidget::UpdateBehavior updateBehavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLWidget</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>dtor.QOpenGLWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>textureFormat</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>textureFormat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>defaultFramebufferObject-1</anchor>
            <arglist>(QOpenGLWidget::TargetBuffer targetBuffer) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLWidget::TargetBuffer</type>
            <name>currentTargetBuffer</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>currentTargetBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLWidget::UpdateBehavior</type>
            <name>updateBehavior</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>updateBehavior</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QPaintDevice *</type>
            <name>redirected</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>redirected</anchor>
            <arglist>(QPoint *p) const const override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qopenglwidget.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLWindow</name>
        <filename>qopenglwindow.html</filename>
        <base>QPaintDeviceWindow</base>
        <member kind="enumeration">
            <name>UpdateBehavior</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPartialUpdate</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialUpdateBlit</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialUpdateBlend</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>UpdateBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>grabFramebuffer</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>grabFramebuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>QOpenGLWindow-1</anchor>
            <arglist>(QOpenGLContext *shareContext, QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>QOpenGLWindow</anchor>
            <arglist>(QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameSwapped</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>frameSwapped</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>initializeGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>initializeGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintEvent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintOverGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintOverGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>paintUnderGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>paintUnderGL</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeGL</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>resizeGL</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLWindow</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>dtor.QOpenGLWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>shareContext</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>shareContext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLWindow::UpdateBehavior</type>
            <name>updateBehavior</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>updateBehavior</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglwindow.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
</tagfile>
